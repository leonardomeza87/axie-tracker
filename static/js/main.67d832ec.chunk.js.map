{"version":3,"sources":["components/AddressAggregator.jsx","components/Record.jsx","components/Records.jsx","components/Summary.jsx","App.jsx","index.js"],"names":["AddressAggregator","updateAddresses","useState","address","setAddress","update","l","length","trim","className","htmlFor","id","type","value","onChange","target","onKeyDown","e","key","preventDefault","placeholder","onClick","Record","account","lastPrice","deleteAccount","in_game_slp","last_claim","lifetime_slp","mmr","name","next_claim","rank","ronin","ronin_slp","total_slp","href","rel","toFixed","Date","toLocaleString","Records","binanceData","gameData","addresses","setAddresses","accounts","setAccounts","newAddresses","filter","useEffect","array","property","slice","console","log","push","map","i","Summary","priceChangePercent","inGame","setInGame","setRonin","total","setTotal","totalSLP","roninSLP","inGameSLP","Number","style","color","App","localStorage","getItem","JSON","parse","setBinanceData","setGameData","setItem","stringify","serializedAddresses","forEach","addressSet","promises","Promise","all","fetch","a","res1","res2","json","json1","json2","success","address0x","updateData","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.67d832ec.chunk.js","sourcesContent":["import { useState } from \"react\";\r\n\r\nconst AddressAggregator = ({ updateAddresses }) => {\r\n  const [address, setAddress] = useState(\"\");\r\n\r\n  const handleChange = ({ target }) => {\r\n    setAddress(target.value);\r\n  };\r\n\r\n  const update = () => {\r\n    let l = address.length;\r\n    if (l >= 42 && l <= 46) {\r\n      updateAddresses(address.trim());\r\n      setAddress(\"\");\r\n    }\r\n  };\r\n\r\n  const updateByHittingEnter = (e) => {\r\n    // console.log(e.key);\r\n    if (e.key === \"Enter\" || e.key === \" \") {\r\n      e.preventDefault();\r\n      update();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"aggregator\">\r\n      <label htmlFor=\"addressAggregator\">\r\n        <p>Add a ronin address to start visualizing the data</p>\r\n        <span>You can press enter or space to add the address</span>\r\n      </label>\r\n      <div className=\"input\">\r\n        <input\r\n          id=\"addressAggregator\"\r\n          type=\"text\"\r\n          value={address}\r\n          onChange={handleChange}\r\n          onKeyDown={updateByHittingEnter}\r\n          placeholder={\"0xedb136a58e616c0443988d2897af59aa17045045\"}\r\n        />\r\n        <button onClick={update}>Add</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddressAggregator;\r\n","const Record = ({ account, lastPrice, deleteAccount }) => {\r\n  const {\r\n    in_game_slp,\r\n    last_claim,\r\n    lifetime_slp,\r\n    mmr,\r\n    name,\r\n    next_claim,\r\n    rank,\r\n    ronin,\r\n    ronin_slp,\r\n    total_slp,\r\n  } = account;\r\n\r\n  const handleClick = () => {\r\n    deleteAccount(ronin);\r\n  };\r\n\r\n  return (\r\n    <div className=\"record\">\r\n      <h3>{name}</h3>\r\n      <a\r\n        href={`https://marketplace.axieinfinity.com/profile/${ronin}/axie`}\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        {ronin}\r\n      </a>\r\n      <br />\r\n      <br />\r\n      <p>MMR: {mmr}</p>\r\n      <p>Rank: #{rank}</p>\r\n      <br />\r\n      <p>\r\n        Total SLP: {total_slp} ~ (${(total_slp * lastPrice).toFixed(4)})\r\n      </p>\r\n      <p>In Game SLP: {in_game_slp}</p>\r\n      <p>In Ronin SLP: {ronin_slp}</p>\r\n\r\n      <br />\r\n      <br />\r\n\r\n      <p>\r\n        Last Claim: {new Date(last_claim * 1000).toLocaleString()} ~ Next Claim:{\" \"}\r\n        {new Date(next_claim * 1000).toLocaleString()}\r\n      </p>\r\n\r\n      <br />\r\n      <p>Lifetime SLP: {lifetime_slp}</p>\r\n\r\n      <br />\r\n      <br />\r\n      <button onClick={handleClick}>Delete</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Record;\r\n","import { useEffect, useState } from \"react\";\r\nimport Record from \"./Record\";\r\n\r\nconst Records = ({ binanceData, gameData, addresses, setAddresses }) => {\r\n  const { lastPrice } = binanceData;\r\n\r\n  const [accounts, setAccounts] = useState([]);\r\n\r\n  const deleteAccount = (ronin) => {\r\n    // let newAccounts = accounts.filter((account) => {\r\n    //   return account.ronin !== ronin;\r\n    // });\r\n\r\n    let newAddresses = addresses.filter((address) => {\r\n      return address !== ronin;\r\n    });\r\n\r\n    setAddresses(newAddresses);\r\n    // setAccounts(newAccounts);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let array = [];\r\n\r\n    for (let property in gameData) {\r\n      gameData[property].ronin = \"ronin:\" + property.slice(2);\r\n      console.log(gameData[property].name);\r\n      array.push(gameData[property]);\r\n    }\r\n    setAccounts([...array]);\r\n  }, [gameData]);\r\n\r\n  console.log(accounts);\r\n\r\n  return (\r\n    <div>\r\n      {accounts.map((account, i) => {\r\n        return (\r\n          <Record\r\n            account={account}\r\n            lastPrice={lastPrice}\r\n            key={i}\r\n            deleteAccount={deleteAccount}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Records;\r\n","import { useEffect, useState } from \"react\";\r\n\r\nconst Summary = ({ binanceData, gameData }) => {\r\n  const { lastPrice, priceChangePercent } = binanceData;\r\n\r\n  const [inGame, setInGame] = useState(0);\r\n  const [ronin, setRonin] = useState(0);\r\n  const [total, setTotal] = useState(0);\r\n\r\n  useEffect(() => {\r\n    let totalSLP = 0;\r\n    let roninSLP = 0;\r\n    let inGameSLP = 0;\r\n\r\n    for (let property in gameData) {\r\n      inGameSLP += gameData[property].in_game_slp;\r\n      roninSLP += gameData[property].ronin_slp;\r\n      totalSLP += gameData[property].total_slp;\r\n    }\r\n\r\n    setInGame(inGameSLP);\r\n    setRonin(roninSLP);\r\n    setTotal(totalSLP);\r\n  }, [gameData]);\r\n\r\n  return (\r\n    <div className=\"summary\">\r\n      <p>\r\n        SLP Value: ~ <strong> ${Number(lastPrice).toFixed(4)}</strong>\r\n      </p>\r\n      <p>\r\n        Change 24hrs: ~{\" \"}\r\n        <strong\r\n          style={priceChangePercent < 0 ? { color: \"red\" } : { color: \"green\" }}\r\n        >\r\n          {priceChangePercent}%\r\n        </strong>\r\n      </p>\r\n      <br />\r\n      <br />\r\n      <p>\r\n        Total SLP: {total} ~ <strong>${(total * lastPrice).toFixed(4)}</strong>\r\n      </p>\r\n      <p>\r\n        In Game SLP: {inGame} ~{\" \"}\r\n        <strong>${(inGame * lastPrice).toFixed(4)}</strong>\r\n      </p>\r\n\r\n      <p>\r\n        In Ronin SLP: {ronin} ~{\" \"}\r\n        <strong>${(ronin * lastPrice).toFixed(4)}</strong>\r\n      </p>\r\n      <br />\r\n      <br />\r\n      <p>\r\n        Profit: (50%) ~ <strong>${(total * lastPrice).toFixed(4) / 2}</strong>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Summary;\r\n","import { useEffect, useState } from \"react\";\nimport AddressAggregator from \"./components/AddressAggregator\";\nimport Records from \"./components/Records\";\nimport Summary from \"./components/Summary\";\nimport \"./styles/App.scss\";\n\nfunction App() {\n  const BINANCE_API =\n    \"https://api.binance.com/api/v3/ticker/24hr?symbol=SLPUSDT\";\n  const GAME_API = \"https://game-api.axie.technology/api/v1/\";\n\n  const [addresses, setAddresses] = useState(\n    localStorage.getItem(\"addresses\")\n      ? JSON.parse(localStorage.getItem(\"addresses\"))\n      : []\n  );\n  const [binanceData, setBinanceData] = useState(null);\n  const [gameData, setGameData] = useState(null);\n\n  const updateAddresses = (address) => {\n    setAddresses([...addresses, address]);\n  };\n\n  useEffect(() => {\n    localStorage.setItem(\"addresses\", JSON.stringify(addresses));\n\n    if (addresses.length > 0) {\n      let serializedAddresses = \"\";\n\n      addresses.forEach((address) => {\n        serializedAddresses += address + \",\";\n      });\n\n      const addressSet = serializedAddresses.slice(0, -1);\n\n      const promises = Promise.all([\n        fetch(BINANCE_API),\n        fetch(GAME_API + addressSet),\n      ]);\n\n      const updateData = async () => {\n        const [res1, res2] = await promises;\n\n        const json1 = await res1.json();\n        const json2 = await res2.json();\n\n        setBinanceData(json1);\n\n        if (json2.success) {\n          const address0x = \"0x\" + addressSet.slice(6);\n          setGameData({ [address0x]: json2 });\n        } else {\n          setGameData(json2);\n        }\n\n        console.log(json1, json2);\n      };\n\n      updateData();\n    } else {\n      setGameData([]);\n    }\n  }, [addresses]);\n\n  return (\n    <main className=\"app\">\n      <div className=\"container\">\n        <AddressAggregator updateAddresses={updateAddresses} />\n        {binanceData && gameData && (\n          <>\n            <Summary binanceData={binanceData} gameData={gameData} />\n            <Records\n              binanceData={binanceData}\n              gameData={gameData}\n              addresses={addresses}\n              setAddresses={setAddresses}\n            />\n          </>\n        )}\n      </div>\n    </main>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/globals.scss\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}